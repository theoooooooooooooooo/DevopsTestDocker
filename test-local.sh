#!/bin/bash
set -e

echo "üß™ Tests locaux avant d√©ploiement sur Render"
echo "==========================================="

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test 1: V√©rifier que le Dockerfile existe
echo ""
echo "üìÑ Test 1: V√©rification du Dockerfile..."
if [ -f "Dockerfile" ]; then
    echo -e "${GREEN}‚úÖ Dockerfile trouv√©${NC}"
else
    echo -e "${RED}‚ùå Dockerfile manquant${NC}"
    exit 1
fi

# Test 2: V√©rifier que start.sh existe
echo ""
echo "üìÑ Test 2: V√©rification du script de d√©marrage..."
if [ -f "start.sh" ]; then
    echo -e "${GREEN}‚úÖ start.sh trouv√©${NC}"
else
    echo -e "${RED}‚ùå start.sh manquant${NC}"
    exit 1
fi
# Test 3: V√©rifier que .htaccess existe
echo ""
echo "üìÑ Test 3: V√©rification du fichier .htaccess..."
if [ -f "backend/.htaccess" ]; then
    echo -e "${GREEN}‚úÖ backend/.htaccess trouv√©${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  backend/.htaccess manquant - sera cr√©√©${NC}"
    mkdir -p backend
    cat > backend/.htaccess << 'EOF'
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^ index.php [L]
EOF
    echo -e "${GREEN}‚úÖ backend/.htaccess cr√©√©${NC}"
fi

# Test 4: V√©rifier que Ini.sql existe
echo ""
echo "üìÑ Test 4: V√©rification du script SQL..."
if [ -f "backend/Ini.sql" ]; then
    echo -e "${GREEN}‚úÖ backend/Ini.sql trouv√©${NC}"
else
    echo -e "${RED}‚ùå backend/Ini.sql manquant${NC}"
    exit 1
fi

# Test 5: V√©rifier la syntaxe du Dockerfile
echo ""
echo "üîç Test 5: V√©rification de la syntaxe du Dockerfile..."
if grep -q '<Directory /var/www/html> \\' Dockerfile; then
    echo -e "${RED}‚ùå ERREUR: Dockerfile contient des backslashes incorrects${NC}"
    echo "   La ligne avec <Directory> doit utiliser \\n\\ pour les nouvelles lignes"
    exit 1
else
    echo -e "${GREEN}‚úÖ Syntaxe du Dockerfile correcte${NC}"
fi
# Test 6: Build Docker local
echo ""
echo "üê≥ Test 6: Build Docker (cela peut prendre quelques minutes)..."
if docker build -t gestion-salles-test . > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Build Docker r√©ussi${NC}"
else
    echo -e "${RED}‚ùå Build Docker √©chou√©${NC}"
    echo "   Ex√©cutez 'docker build -t gestion-salles-test .' pour voir les erreurs"
    exit 1
fi

# Test 7: Lancer le conteneur (optionnel)
echo ""
echo "üöÄ Test 7: Lancement du conteneur (optionnel)..."
echo -e "${YELLOW}Voulez-vous lancer le conteneur pour tester ? (y/n)${NC}"
read -r response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    echo "Lancement du conteneur sur le port 10000..."
    docker run -d -p 10000:10000 --name gestion-salles-test gestion-salles-test
    
    echo "Attente du d√©marrage (30 secondes)..."
    sleep 30
    
    # Test de sant√©
    echo "Test de l'endpoint /health..."
    if curl -f http://localhost:10000/health > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ API r√©pond correctement${NC}"
    else
        echo -e "${RED}‚ùå API ne r√©pond pas${NC}"
        echo "Logs du conteneur :"
        docker logs gestion-salles-test
    fi
    
    echo ""
    echo "Nettoyage..."
    docker stop gestion-salles-test
    docker rm gestion-salles-test
fi

echo ""
echo "==========================================="
echo -e "${GREEN}üéâ Tous les tests sont pass√©s !${NC}"
echo ""
echo "Vous pouvez maintenant d√©ployer sur Render :"
echo "1. Poussez votre code sur Git"
echo "2. Cr√©ez un nouveau Web Service sur Render"
echo "3. Configurez les variables d'environnement"
echo "4. D√©ployez !"
echo ""
echo "Pour plus d'informations, consultez DEPLOY_RENDER.md"